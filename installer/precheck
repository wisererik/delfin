#!/bin/bash
# Copyright 2020 The SODA Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Get the required packages from the conf
BASEDIR=$(dirname "$0")
python_version=$(awk -F "=" '/python_version/ {print $2}' ${BASEDIR}/install.conf)
pip_version=$(awk -F "=" '/pip_version/ {print $2}' ${BASEDIR}/install.conf)
apt_update_command="sudo apt-get update"
apt_update_done=0
BIN_DIR=/usr/bin/
PROJECT_NAME='delfin'
PROJECT_DIR=$(dirname "$0")
log=delfin::log


check_python(){
    py_ver=$(python3 -V)
    if [ $? == 0 ]; then
        # result will be something like, "Python 3.x.x"
        # we need to get the 3.x.x out of it
        IFS=' ' read -ra tokens <<< "$py_ver"
        py_ver=${tokens[1]}
        installed_python=${py_ver%%\.*}
        req_python=${python_version%\.*}
        if [[ $installed_python -eq $req_python ]]; then
            delfin::log "Required python is [${req_python}] and installed is [${installed_python}]"
            
            test -n "$(which python${req_python})" && python_path=$(which python${req_python})
            if [[ -z $python_path ]]; then
                delfin::log "Can not find required python version installed, please install it."
                exit 2
            fi
        fi
        #ln -sf $python_path /usr/bin/python
    fi
}

check_pip(){
    if [[ -x "$(which pip)" ]]; then
        test -n "$(which pip3)" && pip_path=$(which pip3)
        if [[ -z $pip_path ]]; then
            delfin::log "Can not find pip, please install it."
            exit 2
        fi
        ln -sf $pip_path /usr/local/bin/pip
    fi
}

check_install_sqlite(){
    sqlite_ver=$(sqlite3 -version)
    if [ $? -eq 0 ]; then
        delfin::log "Sqlite3 version[${sqlite_ver}] is already installed"
        return
    else
        # Install sqlite
        if [ ${apt_update_done} -eq 0 ]; then
            ${apt_update_command}
            apt_update_done=1
        fi
        sudo apt-get -y install sqlite3
    fi
}

check_install_rabbitmq(){
    # check if MQ is installed
    mq_status=$(systemctl is-active --quiet rabbitmq-server.service)
    if [ $? -eq 0 ]; then
        delfin::log "RabbitMQ is already installed"
        return
    else
        #TODO check erlang
        # Import rabbitMQ
        ret=$(wget -O- https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc | sudo apt-key add -)
        if [ $? -eq 0 ]; then
            ret=$(wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -)
            if ![ $? -eq 0 ]; then
                delfin::log "Error in importing RabbitMQ"
                exit 1
            fi
        else
            delfin::log "Error in importing rabbitMQ"
            exit 1
        fi
        if [ ${apt_update_done} -eq 0 ]; then
            ${apt_update_command}
            apt_update_done=1
        fi
        sudo apt-get -y install rabbitmq-server
    fi
    mq_status=$(systemctl is-active --quiet rabbitmq-server.service)
    if [ $? -eq 0 ]; then
        delfin::log "RabbitMQ is successfully installed"
    fi
}

check_install_redis(){
    # Check if redis is installed or not
    redis_status=$(systemctl is-active --quiet redis.service)
    if [ $? -eq 0 ]; then
        delfin::log "Redis is already installed"
        return
    else
        if [ ${apt_update_done} -eq 0 ]; then
            ${apt_update_command}
            apt_update_done=1
        fi
        sudo apt -y install redis-server
    fi
}


check_sys_req(){
    ubuntu_release=$(${BIN_DIR}lsb_release -cs)
    if [[ ${ubuntu_release} == 'xenial' || ${ubuntu_release} == 'bionic' ]]; then
        delfin::log "System requirements satisfied"
    else
        delfin::log "Installation of ${PROJECT_NAME} is not supported on this platform"
    fi
}

check_install_p3_venv(){

    venv_res=$(python3 -m pip install --user virtualenv)
    if [ $? -eq 0 ]; then
        delfin::log "venv is installed"
    fi
    
    venv_dir=$(python3 -m venv ${BASEDIR}/${PROJECT_NAME})
    source ${BASEDIR}/${PROJECT_NAME}/bin/activate
}

main(){
    source ${BASEDIR}/util.sh
    check_sys_req
    check_python
    check_pip
    check_install_sqlite
    check_install_rabbitmq
    check_install_redis
    check_install_p3_venv
}

# Entry function
main


